{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar crypto = require('crypto');\n\nvar _require = require('@textile/hub'),\n    Client = _require.Client,\n    Where = _require.Where,\n    ThreadID = _require.ThreadID;\n\nvar io = require('socket.io-client');\n\nexport var solveChallenge = function solveChallenge(identity) {\n  return new Promise(function (resolve, reject) {\n    var socket = io(process.env.NEXT_PUBLIC_MIDDLEWARE_URL);\n    socket.on(\"connect\", function () {\n      var publicKey = identity[\"public\"].toString(); // Send public key to server\n\n      socket.emit('authInit', JSON.stringify({\n        pubKey: publicKey,\n        type: 'token'\n      }));\n      socket.on(\"authMsg\", /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n          var data, buf, signed;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  data = JSON.parse(event);\n                  _context.t0 = data.type;\n                  _context.next = _context.t0 === 'error' ? 4 : _context.t0 === 'challenge' ? 6 : _context.t0 === 'token' ? 12 : 15;\n                  break;\n\n                case 4:\n                  reject(data.value);\n                  return _context.abrupt(\"break\", 15);\n\n                case 6:\n                  buf = Buffer.from(data.value);\n                  _context.next = 9;\n                  return identity.sign(buf);\n\n                case 9:\n                  signed = _context.sent;\n                  socket.emit(\"challengeResp\", signed);\n                  return _context.abrupt(\"break\", 15);\n\n                case 12:\n                  resolve(data.value);\n                  socket.disconnect();\n                  return _context.abrupt(\"break\", 15);\n\n                case 15:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    });\n  });\n};\nexport var loginUserWithChallenge = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n    var credentials, client;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (id) {\n              _context2.next = 2;\n              break;\n            }\n\n            throw Error('No user ID found');\n\n          case 2:\n            _context2.next = 4;\n            return solveChallenge(id);\n\n          case 4:\n            credentials = _context2.sent;\n            localStorage.setItem('payload', JSON.stringify(credentials));\n            _context2.next = 8;\n            return Client.withUserAuth(credentials.payload);\n\n          case 8:\n            client = _context2.sent;\n            console.log('Verified on Textile API!!');\n            return _context2.abrupt(\"return\", client);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function loginUserWithChallenge(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getCredentials = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var credentials, threadDB, client, threadDb;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            credentials = JSON.parse(localStorage.getItem('payload'));\n            threadDB = credentials.threadDbId;\n            client = Client.withUserAuth(credentials.payload);\n            threadDb = Uint8Array.from(threadDB);\n            return _context3.abrupt(\"return\", {\n              client: client,\n              threadDb: threadDb\n            });\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getCredentials() {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var checkEmailExists = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(email) {\n    var _yield$getCredentials, threadDb, client, threadId, query, result;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return getCredentials();\n\n          case 3:\n            _yield$getCredentials = _context4.sent;\n            threadDb = _yield$getCredentials.threadDb;\n            client = _yield$getCredentials.client;\n            threadId = ThreadID.fromBytes(threadDb);\n            query = new Where('email').eq(email);\n            _context4.next = 10;\n            return client.find(threadId, 'RegisterUser', query);\n\n          case 10:\n            result = _context4.sent;\n\n            if (!(result.length === 1)) {\n              _context4.next = 13;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", {\n              status: false,\n              user: result[0]\n            });\n\n          case 13:\n            return _context4.abrupt(\"return\", {\n              status: true\n            });\n\n          case 16:\n            _context4.prev = 16;\n            _context4.t0 = _context4[\"catch\"](0);\n            console.log(\"Error:\", _context4.t0);\n            return _context4.abrupt(\"return\", {\n              status: false\n            });\n\n          case 20:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[0, 16]]);\n  }));\n\n  return function checkEmailExists(_x3) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var registerNewUser = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(did, name, email, signUpMode) {\n    var _yield$getCredentials2, threadDb, client, threadId, data, query, result;\n\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            console.log(\"mode:\", signUpMode); //generate aes key for the user\n\n            _context5.next = 4;\n            return getCredentials();\n\n          case 4:\n            _yield$getCredentials2 = _context5.sent;\n            threadDb = _yield$getCredentials2.threadDb;\n            client = _yield$getCredentials2.client;\n            threadId = ThreadID.fromBytes(threadDb);\n            data = {\n              did: did,\n              name: name,\n              email: email,\n              description: 'nan',\n              phoneNumber: 0,\n              location: 'nan',\n              website: 'nan',\n              birthdate: 'nan',\n              verifiables: {\n                github: {\n                  username: 'nan',\n                  githubVerified: false\n                },\n                twitter: {\n                  username: 'nan',\n                  twitterVerified: false\n                }\n              },\n              experience: [{\n                _id: \"-1\"\n              }],\n              signUpMode: signUpMode\n            };\n            query = new Where('did').eq(did);\n            _context5.next = 12;\n            return client.find(threadId, 'RegisterUser', query);\n\n          case 12:\n            result = _context5.sent;\n\n            if (!(result.length < 1)) {\n              _context5.next = 18;\n              break;\n            }\n\n            _context5.next = 16;\n            return client.create(threadId, 'RegisterUser', [data]);\n\n          case 16:\n            localStorage.setItem(\"USER\", JSON.stringify(data));\n            return _context5.abrupt(\"return\", data);\n\n          case 18:\n            console.log(\"User already exists!!\");\n            return _context5.abrupt(\"return\", false);\n\n          case 22:\n            _context5.prev = 22;\n            _context5.t0 = _context5[\"catch\"](0);\n            console.log(\"err:\", _context5.t0);\n            return _context5.abrupt(\"return\", false);\n\n          case 26:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, null, [[0, 22]]);\n  }));\n\n  return function registerNewUser(_x4, _x5, _x6, _x7) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var getLoginUser = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(did) {\n    var _yield$getCredentials3, client, threadDb, query, threadId, result;\n\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n            _context6.next = 3;\n            return getCredentials();\n\n          case 3:\n            _yield$getCredentials3 = _context6.sent;\n            client = _yield$getCredentials3.client;\n            threadDb = _yield$getCredentials3.threadDb;\n            query = new Where('did').eq(did);\n            threadId = ThreadID.fromBytes(threadDb);\n            _context6.next = 10;\n            return client.find(threadId, 'RegisterUser', query);\n\n          case 10:\n            result = _context6.sent;\n\n            if (!(result.length < 1)) {\n              _context6.next = 14;\n              break;\n            }\n\n            console.log(\"Please register user!\");\n            return _context6.abrupt(\"return\", null);\n\n          case 14:\n            return _context6.abrupt(\"return\", result[0]);\n\n          case 17:\n            _context6.prev = 17;\n            _context6.t0 = _context6[\"catch\"](0);\n            console.log(\"err:\", _context6.t0);\n            return _context6.abrupt(\"return\", null);\n\n          case 21:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6, null, [[0, 17]]);\n  }));\n\n  return function getLoginUser(_x8) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var getAllUsers = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(did) {\n    var _yield$getCredentials4, threadDb, client, threadId, registeredUsers, caller, userArray, i, result, value;\n\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.prev = 0;\n            _context7.next = 3;\n            return getCredentials();\n\n          case 3:\n            _yield$getCredentials4 = _context7.sent;\n            threadDb = _yield$getCredentials4.threadDb;\n            client = _yield$getCredentials4.client;\n            threadId = ThreadID.fromBytes(threadDb);\n            _context7.next = 9;\n            return client.find(threadId, 'RegisterUser', {});\n\n          case 9:\n            registeredUsers = _context7.sent;\n            userArray = [];\n            console.log(\"Registered users:\", registeredUsers);\n\n            for (i = 0; i < registeredUsers.length; i++) {\n              result = registeredUsers[i];\n              value = {\n                name: result.name,\n                email: result.email,\n                did: result.did\n              };\n\n              if (did.toLowerCase() === result.did.toLowerCase()) {\n                caller = value;\n              } else {\n                userArray.push(value);\n              }\n            }\n\n            return _context7.abrupt(\"return\", {\n              userArray: userArray,\n              caller: caller\n            });\n\n          case 16:\n            _context7.prev = 16;\n            _context7.t0 = _context7[\"catch\"](0);\n            console.log(\"err:\", _context7.t0);\n            return _context7.abrupt(\"return\", null);\n\n          case 20:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7, null, [[0, 16]]);\n  }));\n\n  return function getAllUsers(_x9) {\n    return _ref7.apply(this, arguments);\n  };\n}();\nexport var updateInfo = /*#__PURE__*/function () {\n  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(name, email, description, phoneNumber, location, website, birthdate, github, twitter, employer, jobTitle) {\n    var _yield$getCredentials5, threadDb, client, threadId, query, user, verifiables, workExperience;\n\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.next = 2;\n            return getCredentials();\n\n          case 2:\n            _yield$getCredentials5 = _context8.sent;\n            threadDb = _yield$getCredentials5.threadDb;\n            client = _yield$getCredentials5.client;\n            threadId = ThreadID.fromBytes(threadDb);\n            _context8.prev = 6;\n            query = new Where('email').eq(email);\n            _context8.next = 10;\n            return client.find(threadId, 'RegisterUser', query);\n\n          case 10:\n            user = _context8.sent;\n            verifiables = {\n              github: {\n                username: github,\n                githubVerified: false\n              },\n              twitter: {\n                username: twitter,\n                twitterVerified: false\n              }\n            };\n            workExperience = {\n              employer: employer,\n              jobTitle: jobTitle\n            };\n            user[0].name = name;\n            user[0].email = email;\n            user[0].description = description;\n            user[0].phoneNumber = phoneNumber;\n            user[0].location = location;\n            user[0].website = website;\n            user[0].birthdate = birthdate;\n            user[0].verifiables = verifiables;\n\n            if (user[0].experience.length === 1 && user[0].experience[0]._id === \"-1\") {\n              user[0].experience = [workExperience];\n            } else {\n              user[0].experience.push(workExperience);\n            }\n\n            _context8.next = 24;\n            return client.save(threadId, 'RegisterUser', [user[0]]);\n\n          case 24:\n            console.log(\"updated!!\");\n            return _context8.abrupt(\"return\", true);\n\n          case 28:\n            _context8.prev = 28;\n            _context8.t0 = _context8[\"catch\"](6);\n            console.log(\"Error:\", _context8.t0);\n            return _context8.abrupt(\"return\", false);\n\n          case 32:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8, null, [[6, 28]]);\n  }));\n\n  return function updateInfo(_x10, _x11, _x12, _x13, _x14, _x15, _x16, _x17, _x18, _x19, _x20) {\n    return _ref8.apply(this, arguments);\n  };\n}();\nexport var updateGithubStatus = /*#__PURE__*/function () {\n  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(email) {\n    var _yield$getCredentials6, threadDb, client, threadId, query, user;\n\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.next = 2;\n            return getCredentials();\n\n          case 2:\n            _yield$getCredentials6 = _context9.sent;\n            threadDb = _yield$getCredentials6.threadDb;\n            client = _yield$getCredentials6.client;\n            threadId = ThreadID.fromBytes(threadDb);\n            _context9.prev = 6;\n            query = new Where('email').eq(email);\n            _context9.next = 10;\n            return client.find(threadId, 'RegisterUser', query);\n\n          case 10:\n            user = _context9.sent;\n            user[0].verifiables.github.githubVerified = true;\n            _context9.next = 14;\n            return client.save(threadId, 'RegisterUser', [user[0]]);\n\n          case 14:\n            console.log(\"updated!!\");\n            return _context9.abrupt(\"return\", true);\n\n          case 18:\n            _context9.prev = 18;\n            _context9.t0 = _context9[\"catch\"](6);\n            console.log(\"Error:\", _context9.t0);\n            return _context9.abrupt(\"return\", false);\n\n          case 22:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9, null, [[6, 18]]);\n  }));\n\n  return function updateGithubStatus(_x21) {\n    return _ref9.apply(this, arguments);\n  };\n}();\nexport var updateTwitterStatus = /*#__PURE__*/function () {\n  var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(email) {\n    var _yield$getCredentials7, threadDb, client, threadId, query, user;\n\n    return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            _context10.next = 2;\n            return getCredentials();\n\n          case 2:\n            _yield$getCredentials7 = _context10.sent;\n            threadDb = _yield$getCredentials7.threadDb;\n            client = _yield$getCredentials7.client;\n            threadId = ThreadID.fromBytes(threadDb);\n            _context10.prev = 6;\n            query = new Where('email').eq(email);\n            _context10.next = 10;\n            return client.find(threadId, 'RegisterUser', query);\n\n          case 10:\n            user = _context10.sent;\n            user[0].verifiables.twitter.twitterVerified = true;\n            _context10.next = 14;\n            return client.save(threadId, 'RegisterUser', [user[0]]);\n\n          case 14:\n            console.log(\"updated!!\");\n            return _context10.abrupt(\"return\", true);\n\n          case 18:\n            _context10.prev = 18;\n            _context10.t0 = _context10[\"catch\"](6);\n            console.log(\"Error:\", _context10.t0);\n            return _context10.abrupt(\"return\", false);\n\n          case 22:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10, null, [[6, 18]]);\n  }));\n\n  return function updateTwitterStatus(_x22) {\n    return _ref10.apply(this, arguments);\n  };\n}();\n/*\r\nexport const generateCipherKey = function(){\r\n    try {\r\n        const seed = crypto.randomBytes(32).toString()\r\n        return new Promise((resolve)=>{\r\n            const cipherKey = crypto.createHash('sha256').update(seed).digest();\r\n            resolve(cipherKey)\r\n        })\r\n    }catch (err) {\r\n        console.error(\"Error while generating symmetric key:\",err)\r\n        return null\r\n    }\r\n}\r\n*/\n\n/*\r\nexport const encryptData = function(data,cipherKey){\r\n    return new Promise((resolve)=>{\r\n        let iv = crypto.randomBytes(16);\r\n        const cipher = crypto.createCipheriv('aes256', cipherKey, iv);\r\n        const encryptedData= Buffer.concat([\r\n            iv,\r\n            cipher.update(data),\r\n            cipher.final()\r\n        ]);\r\n        resolve(encryptedData)\r\n    })\r\n}\r\n*/\n\n/*\r\nexport const decryptData = async function(encryptedData,cipherKey){\r\n    const iv = encryptedData.slice(0,16)\r\n    encryptedData = encryptedData.slice(16)\r\n    return new Promise((resolve)=>{\r\n        const decipher = crypto.createDecipheriv(\"aes256\",cipherKey,iv)\r\n        const decryptedData = Buffer.concat([decipher.update(encryptedData), decipher.final()]);\r\n        resolve(decryptedData)\r\n    })\r\n}\r\n*/","map":{"version":3,"sources":["D:/identity-managment/lib/threadDb.js"],"names":["crypto","require","Client","Where","ThreadID","io","solveChallenge","identity","Promise","resolve","reject","socket","process","env","NEXT_PUBLIC_MIDDLEWARE_URL","on","publicKey","toString","emit","JSON","stringify","pubKey","type","event","data","parse","value","buf","Buffer","from","sign","signed","disconnect","loginUserWithChallenge","id","Error","credentials","localStorage","setItem","withUserAuth","payload","client","console","log","getCredentials","getItem","threadDB","threadDbId","threadDb","Uint8Array","checkEmailExists","email","threadId","fromBytes","query","eq","find","result","length","status","user","registerNewUser","did","name","signUpMode","description","phoneNumber","location","website","birthdate","verifiables","github","username","githubVerified","twitter","twitterVerified","experience","_id","create","getLoginUser","getAllUsers","registeredUsers","userArray","i","toLowerCase","caller","push","updateInfo","employer","jobTitle","workExperience","save","updateGithubStatus","updateTwitterStatus"],"mappings":"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","sourcesContent":["\r\nconst crypto = require('crypto')\r\nconst { Client, Where, ThreadID } = require('@textile/hub')\r\nconst io = require('socket.io-client');\r\n\r\nexport const solveChallenge = (identity) => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        const socket = io(process.env.NEXT_PUBLIC_MIDDLEWARE_URL);\r\n        socket.on(\"connect\", () => {\r\n            const publicKey = identity.public.toString();\r\n\r\n            // Send public key to server\r\n            socket.emit('authInit', JSON.stringify({\r\n                pubKey: publicKey,\r\n                type: 'token'\r\n            }));\r\n\r\n            socket.on(\"authMsg\", async (event) => {\r\n                const data = JSON.parse(event)\r\n                switch (data.type) {\r\n                    case 'error': {\r\n                        reject(data.value);\r\n                        break;\r\n                    }\r\n\r\n                    //solve the challenge\r\n                    case 'challenge': {\r\n                        const buf = Buffer.from(data.value)\r\n                        const signed = await identity.sign(buf)\r\n                        socket.emit(\"challengeResp\", signed);\r\n                        break;\r\n                    }\r\n\r\n                    //get the token and store it\r\n                    case 'token': {\r\n                        resolve(data.value)\r\n                        socket.disconnect();\r\n                        break;\r\n                    }\r\n                }\r\n            })\r\n        });\r\n    });\r\n}\r\n\r\nexport const loginUserWithChallenge = async function(id){\r\n    if (!id) {\r\n        throw Error('No user ID found')\r\n    }\r\n\r\n    /** Use the identity to request a new API token when needed */\r\n    const credentials = await solveChallenge(id);\r\n    localStorage.setItem('payload',JSON.stringify(credentials))\r\n    const client = await Client.withUserAuth(credentials.payload)\r\n    console.log('Verified on Textile API!!')\r\n    return client\r\n}\r\n\r\nexport const getCredentials = async function(){\r\n    const credentials = JSON.parse(localStorage.getItem('payload'))\r\n    const threadDB = credentials.threadDbId\r\n    const client = Client.withUserAuth(credentials.payload)\r\n    const threadDb = Uint8Array.from(threadDB)\r\n    return {client, threadDb}\r\n}\r\n\r\nexport const checkEmailExists = async function(email){\r\n    try{\r\n        const {threadDb, client} = await getCredentials()\r\n        const threadId = ThreadID.fromBytes(threadDb)\r\n        const query = new Where('email').eq(email)\r\n        const result = await client.find(threadId, 'RegisterUser', query)\r\n        if (result.length===1){\r\n            return {\r\n                status: false,\r\n                user: result[0]\r\n            }\r\n        }\r\n        return {status:true}\r\n    }catch (e){\r\n        console.log(\"Error:\",e)\r\n        return {status: false}\r\n    }\r\n}\r\n\r\nexport const registerNewUser = async function(did, name, email, signUpMode){\r\n    try {\r\n        console.log(\"mode:\",signUpMode)\r\n        //generate aes key for the user\r\n        const {threadDb, client} = await getCredentials()\r\n        const threadId = ThreadID.fromBytes(threadDb)\r\n        const data = {\r\n            did:did,\r\n            name: name,\r\n            email: email,\r\n            description: 'nan',\r\n            phoneNumber: 0,\r\n            location: 'nan',\r\n            website: 'nan',\r\n            birthdate: 'nan',\r\n            verifiables: {\r\n                github: {\r\n                    username: 'nan',\r\n                    githubVerified: false,\r\n                },\r\n                twitter: {\r\n                    username: 'nan',\r\n                    twitterVerified: false,\r\n                }\r\n            },\r\n            experience: [{_id:\"-1\"}],\r\n            signUpMode: signUpMode\r\n        }\r\n\r\n        const query = new Where('did').eq(did)\r\n        const result = await client.find(threadId, 'RegisterUser', query)\r\n        if (result.length<1){\r\n            await client.create(threadId, 'RegisterUser', [data])\r\n            localStorage.setItem(\"USER\", JSON.stringify(data))\r\n            return data\r\n        }\r\n        console.log(\"User already exists!!\")\r\n        return false\r\n    }catch(err){\r\n        console.log(\"err:\",err)\r\n        return false\r\n    }\r\n}\r\n\r\nexport const getLoginUser = async function(did){\r\n    try {\r\n        const {client, threadDb} = await getCredentials()\r\n        const query = new Where('did').eq(did)\r\n        const threadId = ThreadID.fromBytes(threadDb)\r\n        const result = await client.find(threadId, 'RegisterUser', query)\r\n\r\n        if (result.length<1){\r\n            console.log(\"Please register user!\")\r\n            return null\r\n        }\r\n        return result[0]\r\n    }catch (err) {\r\n        console.log(\"err:\",err)\r\n        return null\r\n    }\r\n}\r\n\r\nexport const getAllUsers = async function(did){\r\n    try {\r\n        const {threadDb, client} = await getCredentials()\r\n        const threadId = ThreadID.fromBytes(threadDb)\r\n        const registeredUsers = await client.find(threadId, 'RegisterUser', {})\r\n        let caller\r\n        let userArray = []\r\n        console.log(\"Registered users:\", registeredUsers)\r\n\r\n        for (let i=0;i<registeredUsers.length;i++){\r\n            const result = registeredUsers[i]\r\n            const value = {\r\n                name: result.name,\r\n                email: result.email,\r\n                did: result.did\r\n            }\r\n            if (did.toLowerCase() === result.did.toLowerCase()) {\r\n                caller = value\r\n            }\r\n            else {\r\n                userArray.push(value)\r\n            }\r\n        }\r\n\r\n        return {\r\n            userArray: userArray,\r\n            caller: caller\r\n        }\r\n    }catch (e){\r\n        console.log(\"err:\",e)\r\n        return null\r\n    }\r\n}\r\n\r\nexport const updateInfo = async function(name,email, description, phoneNumber, location, website, birthdate,\r\n                                         github, twitter, employer, jobTitle ){\r\n    const {threadDb, client} = await getCredentials()\r\n    const threadId = ThreadID.fromBytes(threadDb)\r\n    try{\r\n        let query = new Where('email').eq(email)\r\n        let user = await client.find(threadId, 'RegisterUser', query)\r\n\r\n        const verifiables = {\r\n            github: {\r\n                username: github,\r\n                githubVerified: false,\r\n            },\r\n            twitter: {\r\n                username: twitter,\r\n                twitterVerified: false,\r\n            }\r\n        }\r\n\r\n        const workExperience = {\r\n            employer: employer,\r\n            jobTitle: jobTitle\r\n        }\r\n\r\n        user[0].name = name\r\n        user[0].email = email\r\n        user[0].description = description\r\n        user[0].phoneNumber = phoneNumber\r\n        user[0].location = location\r\n        user[0].website = website\r\n        user[0].birthdate = birthdate\r\n        user[0].verifiables = verifiables\r\n        if (user[0].experience.length ===1 && user[0].experience[0]._id === \"-1\"){\r\n            user[0].experience = [workExperience]\r\n        }else{\r\n            user[0].experience.push(workExperience)\r\n        }\r\n\r\n        await client.save(threadId,'RegisterUser',[user[0]])\r\n        console.log(\"updated!!\")\r\n        return true\r\n    }catch (e) {\r\n        console.log(\"Error:\",e)\r\n        return false\r\n    }\r\n}\r\n\r\nexport const updateGithubStatus = async function(email){\r\n    const {threadDb, client} = await getCredentials()\r\n    const threadId = ThreadID.fromBytes(threadDb)\r\n    try{\r\n        let query = new Where('email').eq(email)\r\n        let user = await client.find(threadId, 'RegisterUser', query)\r\n\r\n        user[0].verifiables.github.githubVerified = true\r\n\r\n        await client.save(threadId,'RegisterUser',[user[0]])\r\n        console.log(\"updated!!\")\r\n        return true\r\n    }catch (e) {\r\n        console.log(\"Error:\",e)\r\n        return false\r\n    }\r\n}\r\n\r\nexport const updateTwitterStatus = async function(email){\r\n    const {threadDb, client} = await getCredentials()\r\n    const threadId = ThreadID.fromBytes(threadDb)\r\n    try{\r\n        let query = new Where('email').eq(email)\r\n        let user = await client.find(threadId, 'RegisterUser', query)\r\n\r\n        user[0].verifiables.twitter.twitterVerified = true\r\n\r\n        await client.save(threadId,'RegisterUser',[user[0]])\r\n        console.log(\"updated!!\")\r\n        return true\r\n    }catch (e) {\r\n        console.log(\"Error:\",e)\r\n        return false\r\n    }\r\n}\r\n\r\n/*\r\nexport const generateCipherKey = function(){\r\n    try {\r\n        const seed = crypto.randomBytes(32).toString()\r\n        return new Promise((resolve)=>{\r\n            const cipherKey = crypto.createHash('sha256').update(seed).digest();\r\n            resolve(cipherKey)\r\n        })\r\n    }catch (err) {\r\n        console.error(\"Error while generating symmetric key:\",err)\r\n        return null\r\n    }\r\n}\r\n*/\r\n\r\n/*\r\nexport const encryptData = function(data,cipherKey){\r\n    return new Promise((resolve)=>{\r\n        let iv = crypto.randomBytes(16);\r\n        const cipher = crypto.createCipheriv('aes256', cipherKey, iv);\r\n        const encryptedData= Buffer.concat([\r\n            iv,\r\n            cipher.update(data),\r\n            cipher.final()\r\n        ]);\r\n        resolve(encryptedData)\r\n    })\r\n}\r\n*/\r\n\r\n/*\r\nexport const decryptData = async function(encryptedData,cipherKey){\r\n    const iv = encryptedData.slice(0,16)\r\n    encryptedData = encryptedData.slice(16)\r\n    return new Promise((resolve)=>{\r\n        const decipher = crypto.createDecipheriv(\"aes256\",cipherKey,iv)\r\n        const decryptedData = Buffer.concat([decipher.update(encryptedData), decipher.final()]);\r\n        resolve(decryptedData)\r\n    })\r\n}\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}