{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"D:\\\\identity-managment\\\\components\\\\auth\\\\SignUp.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { useToasts, Modal, Input } from '@geist-ui/react';\nimport * as Icons from 'react-feather';\nimport makeStyles from '../makeStyles';\nimport { definitions } from '../../utils/config.json'; // import {\n//   generateCipherKey,\n//   loginUserWithChallenge,\n//   registerNewUser,\n//   checkEmailExists,\n// } from '../../lib/threadDb';\n\nvar useStyles = makeStyles(function (ui) {\n  return {\n    form: {\n      display: ' flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    input: {\n      margin: '6px 0'\n    },\n    inputField: {\n      width: '310px !important'\n    }\n  };\n});\n\nfunction SignUp(_ref) {\n  _s();\n\n  var user = _ref.user,\n      idx = _ref.idx,\n      setUserData = _ref.setUserData,\n      identity = _ref.identity,\n      setUser = _ref.setUser;\n\n  var _useState = useState(''),\n      email = _useState[0],\n      setEmail = _useState[1];\n\n  var _useState2 = useState(''),\n      name = _useState2[0],\n      setName = _useState2[1];\n\n  var _useState3 = useState(false),\n      modal = _useState3[0],\n      setModal = _useState3[1];\n\n  var _useState4 = useState(false),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useToasts = useToasts(false),\n      _useToasts2 = _slicedToArray(_useToasts, 2),\n      signUpToast = _useToasts2[0],\n      setToast = _useToasts2[1];\n\n  useEffect(function () {\n    setModal(user === 1);\n  }, [user]);\n\n  var closeHandler = function closeHandler(event) {\n    setModal(false);\n  };\n\n  var classes = useStyles();\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var aesKey, client, _yield$checkEmailExis, status, enc, ceramicRes, encCeramic, threadRes;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return generateCipherKey();\n\n            case 2:\n              aesKey = _context.sent;\n\n              if (!idx) {\n                _context.next = 38;\n                break;\n              }\n\n              setLoading(true);\n              _context.next = 7;\n              return loginUserWithChallenge(identity);\n\n            case 7:\n              client = _context.sent;\n\n              if (!(client != null)) {\n                _context.next = 35;\n                break;\n              }\n\n              _context.next = 11;\n              return checkEmailExists(email);\n\n            case 11:\n              _yield$checkEmailExis = _context.sent;\n              status = _yield$checkEmailExis.status;\n\n              if (!status) {\n                _context.next = 30;\n                break;\n              }\n\n              _context.next = 16;\n              return idx.ceramic.did.createDagJWE(aesKey, [idx.id]);\n\n            case 16:\n              enc = _context.sent;\n              _context.next = 19;\n              return idx.set(definitions.profile, {\n                name: name,\n                email: email\n              });\n\n            case 19:\n              ceramicRes = _context.sent;\n              _context.next = 22;\n              return idx.set(definitions.encryptionKey, {\n                key: enc\n              });\n\n            case 22:\n              encCeramic = _context.sent;\n              _context.next = 25;\n              return registerNewUser(idx.id, name, email, enc, 0);\n\n            case 25:\n              threadRes = _context.sent;\n              setUserData(threadRes);\n\n              if (ceramicRes && threadRes) {\n                setLoading(false);\n                setModal(false);\n                setUser(2);\n              }\n\n              _context.next = 33;\n              break;\n\n            case 30:\n              setToast({\n                text: 'This Email already Exists, Please try with new Email',\n                type: 'warning',\n                delay: 5000\n              });\n              setLoading(false);\n              setModal(true); //setUser(0)\n\n            case 33:\n              _context.next = 38;\n              break;\n\n            case 35:\n              console.log('Not authenticated with server!!!');\n              setLoading(false);\n              setModal(false);\n\n            case 38:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(React.Fragment, null, __jsx(Modal, {\n    open: modal,\n    onClose: closeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, __jsx(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, \"Sign up \"), __jsx(Modal.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: classes.form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: classes.input,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, __jsx(Input, {\n    placeholder: \"Enter your Name\",\n    icon: __jsx(Icons.User, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 23\n      }\n    }),\n    className: classes.inputField,\n    onChange: function onChange(e) {\n      return setName(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  })), __jsx(\"div\", {\n    className: classes.input,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, __jsx(Input, {\n    value: email,\n    placeholder: \"johndoe@domain.com\",\n    icon: __jsx(Icons.Mail, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 23\n      }\n    }),\n    className: classes.inputField,\n    onChange: function onChange(e) {\n      return setEmail(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 15\n    }\n  })))), __jsx(Modal.Action, {\n    passive: true,\n    onClick: function onClick() {\n      return setModal(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, \"Cancel\"), __jsx(Modal.Action, {\n    onClick: handleSubmit,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, \"Submit\")));\n}\n\n_s(SignUp, \"BmwPFEsCtthutOf3bOeY5RSvsuk=\", false, function () {\n  return [useToasts, useStyles];\n});\n\n_c = SignUp;\nexport default SignUp;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUp\");","map":{"version":3,"sources":["D:/identity-managment/components/auth/SignUp.js"],"names":["React","useEffect","useState","useToasts","Modal","Input","Icons","makeStyles","definitions","useStyles","ui","form","display","flexDirection","justifyContent","alignItems","input","margin","inputField","width","SignUp","user","idx","setUserData","identity","setUser","email","setEmail","name","setName","modal","setModal","loading","setLoading","signUpToast","setToast","closeHandler","event","classes","handleSubmit","generateCipherKey","aesKey","loginUserWithChallenge","client","checkEmailExists","status","ceramic","did","createDagJWE","id","enc","set","profile","ceramicRes","encryptionKey","key","encCeramic","registerNewUser","threadRes","text","type","delay","console","log","e","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useToasts, Modal, Input } from '@geist-ui/react';\r\nimport * as Icons from 'react-feather';\r\nimport makeStyles from '../makeStyles';\r\nimport { definitions } from '../../utils/config.json';\r\n// import {\r\n//   generateCipherKey,\r\n//   loginUserWithChallenge,\r\n//   registerNewUser,\r\n//   checkEmailExists,\r\n// } from '../../lib/threadDb';\r\n\r\nconst useStyles = makeStyles((ui) => ({\r\n  form: {\r\n    display: ' flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  input: {\r\n    margin: '6px 0',\r\n  },\r\n  inputField: {\r\n    width: '310px !important',\r\n  },\r\n}));\r\n\r\nfunction SignUp({ user, idx, setUserData, identity, setUser }) {\r\n  const [email, setEmail] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [modal, setModal] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [signUpToast, setToast] = useToasts(false);\r\n\r\n  useEffect(() => {\r\n    setModal(user === 1);\r\n  }, [user]);\r\n\r\n  const closeHandler = (event) => {\r\n    setModal(false);\r\n  };\r\n  const classes = useStyles();\r\n\r\n  const handleSubmit = async () => {\r\n    //ceramic and threaddb\r\n    const aesKey = await generateCipherKey();\r\n    if (idx) {\r\n      setLoading(true);\r\n\r\n      const client = await loginUserWithChallenge(identity);\r\n      if (client != null) {\r\n        const { status } = await checkEmailExists(email);\r\n        if (status) {\r\n          const enc = await idx.ceramic.did.createDagJWE(aesKey, [idx.id]);\r\n\r\n          const ceramicRes = await idx.set(definitions.profile, {\r\n            name: name,\r\n            email: email,\r\n          });\r\n\r\n          const encCeramic = await idx.set(definitions.encryptionKey, {\r\n            key: enc,\r\n          });\r\n\r\n          const threadRes = await registerNewUser(idx.id, name, email, enc, 0);\r\n\r\n          setUserData(threadRes);\r\n          if (ceramicRes && threadRes) {\r\n            setLoading(false);\r\n            setModal(false);\r\n            setUser(2);\r\n          }\r\n        } else {\r\n          setToast({\r\n            text: 'This Email already Exists, Please try with new Email',\r\n            type: 'warning',\r\n            delay: 5000,\r\n          });\r\n\r\n          setLoading(false);\r\n          setModal(true);\r\n          //setUser(0)\r\n        }\r\n      } else {\r\n        console.log('Not authenticated with server!!!');\r\n        setLoading(false);\r\n        setModal(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal open={modal} onClose={closeHandler}>\r\n        <Modal.Title>Sign up </Modal.Title>\r\n\r\n        <Modal.Content>\r\n          <div className={classes.form}>\r\n            <div className={classes.input}>\r\n              <Input\r\n                placeholder='Enter your Name'\r\n                icon={<Icons.User />}\r\n                className={classes.inputField}\r\n                onChange={(e) => setName(e.target.value)}\r\n              />\r\n            </div>\r\n            <div className={classes.input}>\r\n              <Input\r\n                value={email}\r\n                placeholder='johndoe@domain.com'\r\n                icon={<Icons.Mail />}\r\n                className={classes.inputField}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              />\r\n            </div>\r\n          </div>\r\n        </Modal.Content>\r\n        <Modal.Action passive onClick={() => setModal(false)}>\r\n          Cancel\r\n        </Modal.Action>\r\n        <Modal.Action onClick={handleSubmit} loading={loading}>\r\n          Submit\r\n        </Modal.Action>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SignUp;\r\n"]},"metadata":{},"sourceType":"module"}