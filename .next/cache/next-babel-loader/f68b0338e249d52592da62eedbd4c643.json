{"ast":null,"code":"var _jsxFileName = \"D:\\\\identity-managment\\\\pages\\\\_app.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport { CssBaseline, GeistProvider } from '@geist-ui/react';\nimport { generateSignature } from '../lib/signerConnect';\nimport { generateIDX, generateIDXForMagic } from '../lib/identity';\nimport { definitions } from '../utils/config.json';\nimport { getLoginUser, loginUserWithChallenge } from '../lib/threadDb';\nimport { PrivateKey } from '@textile/hub';\nimport { GlobalStyle } from '../utils/Global';\nimport Layout from '../components/Layouts/Layout';\n\nfunction MyApp({\n  Component,\n  pageProps\n}) {\n  const {\n    0: themeType,\n    1: setThemeType\n  } = useState('light');\n  const {\n    0: provider,\n    1: setProvider\n  } = useState(null);\n\n  const toggleDarkMode = () => setThemeType(themeType === 'dark' ? 'light' : 'dark');\n\n  return __jsx(GeistProvider, {\n    theme: {\n      type: themeType\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, __jsx(GlobalStyle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }), __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  })));\n}\n\nexport default MyApp;","map":{"version":3,"sources":["D:/identity-managment/pages/_app.js"],"names":["React","useState","CssBaseline","GeistProvider","generateSignature","generateIDX","generateIDXForMagic","definitions","getLoginUser","loginUserWithChallenge","PrivateKey","GlobalStyle","Layout","MyApp","Component","pageProps","themeType","setThemeType","provider","setProvider","toggleDarkMode","type"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,EAAsBC,aAAtB,QAA2C,iBAA3C;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SAASC,WAAT,EAAsBC,mBAAtB,QAAiD,iBAAjD;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,YAAT,EAAuBC,sBAAvB,QAAqD,iBAArD;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,WAAT,QAA4B,iBAA5B;AACA,OAAOC,MAAP,MAAmB,8BAAnB;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAf,EAAyC;AACvC,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BhB,QAAQ,CAAC,OAAD,CAA1C;AACA,QAAM;AAAA,OAACiB,QAAD;AAAA,OAAWC;AAAX,MAA0BlB,QAAQ,CAAC,IAAD,CAAxC;;AACA,QAAMmB,cAAc,GAAG,MACrBH,YAAY,CAACD,SAAS,KAAK,MAAd,GAAuB,OAAvB,GAAiC,MAAlC,CADd;;AAGA,SACE,MAAC,aAAD;AAAe,IAAA,KAAK,EAAE;AAAEK,MAAAA,IAAI,EAAEL;AAAR,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAIE,MAAC,SAAD,eAAeD,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJF,CADF;AAQD;;AAED,eAAeF,KAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { CssBaseline, GeistProvider } from '@geist-ui/react';\r\nimport { generateSignature } from '../lib/signerConnect';\r\nimport { generateIDX, generateIDXForMagic } from '../lib/identity';\r\nimport { definitions } from '../utils/config.json';\r\nimport { getLoginUser, loginUserWithChallenge } from '../lib/threadDb';\r\nimport { PrivateKey } from '@textile/hub';\r\nimport { GlobalStyle } from '../utils/Global';\r\nimport Layout from '../components/Layouts/Layout';\r\n\r\nfunction MyApp({ Component, pageProps }) {\r\n  const [themeType, setThemeType] = useState('light');\r\n  const [provider, setProvider] = useState(null);\r\n  const toggleDarkMode = () =>\r\n    setThemeType(themeType === 'dark' ? 'light' : 'dark');\r\n\r\n  return (\r\n    <GeistProvider theme={{ type: themeType }}>\r\n      <GlobalStyle />\r\n      {/* <CssBaseline /> */}\r\n\r\n      <Component {...pageProps} />\r\n    </GeistProvider>\r\n  );\r\n}\r\n\r\nexport default MyApp;\r\n"]},"metadata":{},"sourceType":"module"}