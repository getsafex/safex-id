{"ast":null,"code":"import { BigNumber, providers, utils } from 'ethers';\nimport { hashSync } from 'bcryptjs';\n\nconst generateMessageForEntropy = (ethereum_address, application_name) => {\n  return '******************************************************************************** \\n' + 'READ THIS MESSAGE CAREFULLY. \\n' + 'DO NOT SHARE THIS SIGNED MESSAGE WITH ANYONE OR THEY WILL HAVE READ AND WRITE \\n' + 'ACCESS TO THIS APPLICATION. \\n' + 'DO NOT SIGN THIS MESSAGE IF THE FOLLOWING IS NOT TRUE OR YOU DO NOT CONSENT \\n' + 'TO THE CURRENT APPLICATION HAVING ACCESS TO THE FOLLOWING APPLICATION. \\n' + '******************************************************************************** \\n' + 'The Ethereum address used by this application is: \\n' + '\\n' + ethereum_address.value + '\\n' + '\\n' + '\\n' + 'By signing this message, you authorize the current application to use the \\n' + 'following app associated with the above address: \\n' + '\\n' + application_name + '\\n' + '\\n' + '\\n' + 'The hash of your non-recoverable, private, non-persisted password or secret \\n' + 'phrase is: \\n' + '\\n' + '\\n' + '\\n' + '\\n' + '******************************************************************************** \\n' + 'ONLY SIGN THIS MESSAGE IF YOU CONSENT TO THE CURRENT PAGE ACCESSING THE KEYS \\n' + 'ASSOCIATED WITH THE ABOVE ADDRESS AND APPLICATION. \\n' + 'AGAIN, DO NOT SHARE THIS SIGNED MESSAGE WITH ANYONE OR THEY WILL HAVE READ AND \\n' + 'WRITE ACCESS TO THIS APPLICATION. \\n' + '******************************************************************************** \\n';\n};\n\nconst getSigner = async () => {\n  if (!window.ethereum) {\n    throw new Error('Ethereum is not connected. Please download Metamask from https://metamask.io/download.html');\n  }\n\n  console.debug('Initializing web3 provider...');\n  const provider = new providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  return signer;\n};\n\nexport const getProvider = async () => {\n  if (!window.ethereum) {\n    throw new Error('Ethereum is not connected. Please download Metamask from https://metamask.io/download.html');\n  }\n\n  console.debug('Initializing web3 provider...');\n  window.ethereum.enable();\n  const provider = new providers.Web3Provider(window.ethereum);\n  return provider;\n};\n\nconst getAddressAndSigner = async () => {\n  const signer = await getSigner(); // @ts-ignore\n\n  const accounts = await window.ethereum.request({\n    method: 'eth_requestAccounts'\n  });\n\n  if (accounts.length === 0) {\n    throw new Error('No account is provided. Please provide an account to this application.');\n  }\n\n  const address = accounts[0];\n  return {\n    address,\n    signer\n  };\n};\n\nexport const generateSignature = async web3Provider => {\n  let signedText;\n  let providerUsed;\n\n  if (web3Provider) {\n    const signer = web3Provider.getSigner();\n    const userAddress = await signer.getAddress();\n    const message = generateMessageForEntropy(userAddress, 'Portex');\n    signedText = await signer.signMessage(message);\n    providerUsed = web3Provider;\n  } else {\n    const metamask = await getAddressAndSigner();\n    const message = generateMessageForEntropy(metamask.address, 'Portex');\n    signedText = await metamask.signer.signMessage(message);\n    providerUsed = metamask;\n  }\n\n  const hash = utils.keccak256(signedText);\n  const seed = hash // @ts-ignore\n  .replace('0x', '') // @ts-ignore\n  .match(/.{2}/g).map(hexNoPrefix => BigNumber.from('0x' + hexNoPrefix).toNumber());\n  return {\n    seed,\n    providerUsed\n  };\n};","map":{"version":3,"sources":["D:/identity-managment/lib/signerConnect.js"],"names":["BigNumber","providers","utils","hashSync","generateMessageForEntropy","ethereum_address","application_name","value","getSigner","window","ethereum","Error","console","debug","provider","Web3Provider","signer","getProvider","enable","getAddressAndSigner","accounts","request","method","length","address","generateSignature","web3Provider","signedText","providerUsed","userAddress","getAddress","message","signMessage","metamask","hash","keccak256","seed","replace","match","map","hexNoPrefix","from","toNumber"],"mappings":"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","sourcesContent":["import { BigNumber, providers, utils } from 'ethers'\r\nimport { hashSync } from 'bcryptjs'\r\n\r\nconst generateMessageForEntropy = (ethereum_address, application_name) => {\r\n    return (\r\n      '******************************************************************************** \\n' +\r\n      'READ THIS MESSAGE CAREFULLY. \\n' +\r\n      'DO NOT SHARE THIS SIGNED MESSAGE WITH ANYONE OR THEY WILL HAVE READ AND WRITE \\n' +\r\n      'ACCESS TO THIS APPLICATION. \\n' +\r\n      'DO NOT SIGN THIS MESSAGE IF THE FOLLOWING IS NOT TRUE OR YOU DO NOT CONSENT \\n' +\r\n      'TO THE CURRENT APPLICATION HAVING ACCESS TO THE FOLLOWING APPLICATION. \\n' +\r\n      '******************************************************************************** \\n' +\r\n      'The Ethereum address used by this application is: \\n' +\r\n      '\\n' +\r\n      ethereum_address.value +\r\n      '\\n' +\r\n      '\\n' +\r\n      '\\n' +\r\n      'By signing this message, you authorize the current application to use the \\n' +\r\n      'following app associated with the above address: \\n' +\r\n      '\\n' +\r\n      application_name +\r\n      '\\n' +\r\n      '\\n' +\r\n      '\\n' +\r\n      'The hash of your non-recoverable, private, non-persisted password or secret \\n' +\r\n      'phrase is: \\n' +\r\n      '\\n' +\r\n      '\\n' +\r\n      '\\n' +\r\n      '\\n' +\r\n      '******************************************************************************** \\n' +\r\n      'ONLY SIGN THIS MESSAGE IF YOU CONSENT TO THE CURRENT PAGE ACCESSING THE KEYS \\n' +\r\n      'ASSOCIATED WITH THE ABOVE ADDRESS AND APPLICATION. \\n' +\r\n      'AGAIN, DO NOT SHARE THIS SIGNED MESSAGE WITH ANYONE OR THEY WILL HAVE READ AND \\n' +\r\n      'WRITE ACCESS TO THIS APPLICATION. \\n' +\r\n      '******************************************************************************** \\n'\r\n    );\r\n  }\r\n\r\n  const getSigner = async () => {\r\n    if (!window.ethereum) {\r\n      throw new Error(\r\n        'Ethereum is not connected. Please download Metamask from https://metamask.io/download.html'\r\n      );\r\n    }\r\n\r\n    console.debug('Initializing web3 provider...');\r\n    const provider = new providers.Web3Provider(window.ethereum);\r\n    const signer = provider.getSigner();\r\n    return signer\r\n  }\r\n\r\n  export const getProvider = async () => {\r\n    if (!window.ethereum) {\r\n      throw new Error(\r\n        'Ethereum is not connected. Please download Metamask from https://metamask.io/download.html'\r\n      );\r\n    }\r\n\r\n    console.debug('Initializing web3 provider...');\r\n    window.ethereum.enable()\r\n    const provider = new providers.Web3Provider(window.ethereum);\r\n    return provider\r\n  }\r\n\r\n  const getAddressAndSigner = async() => {\r\n    const signer = await getSigner()\r\n    // @ts-ignore\r\n    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n    if (accounts.length === 0) {\r\n      throw new Error('No account is provided. Please provide an account to this application.');\r\n    }\r\n    const address = accounts[0];\r\n    return {address, signer}\r\n  }\r\n\r\n  export const generateSignature = async (web3Provider) => {\r\n    let signedText;\r\n    let providerUsed;\r\n    if(web3Provider){\r\n      const signer = web3Provider.getSigner();\r\n      const userAddress = await signer.getAddress();\r\n      const message = generateMessageForEntropy(userAddress, 'Portex')\r\n      signedText = await signer.signMessage(message);\r\n      providerUsed = web3Provider\r\n    }\r\n    else{\r\n      const metamask = await getAddressAndSigner()\r\n      const message = generateMessageForEntropy(metamask.address, 'Portex')\r\n      signedText = await metamask.signer.signMessage(message);\r\n      providerUsed = metamask\r\n    }\r\n    \r\n    const hash = utils.keccak256(signedText);\r\n    const seed = hash\r\n      // @ts-ignore\r\n      .replace('0x', '')\r\n      // @ts-ignore\r\n      .match(/.{2}/g)\r\n      .map((hexNoPrefix) => BigNumber.from('0x' + hexNoPrefix).toNumber())\r\n    return {seed, providerUsed}\r\n  }"]},"metadata":{},"sourceType":"module"}