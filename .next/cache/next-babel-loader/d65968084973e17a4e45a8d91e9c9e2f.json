{"ast":null,"code":"var _jsxFileName = \"D:\\\\identity-managment\\\\pages\\\\_app.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport { CssBaseline, GeistProvider } from '@geist-ui/react';\nimport { generateSignature } from '../lib/signerConnect';\nimport { generateIDX, generateIDXForMagic } from '../lib/identity';\nimport { definitions } from '../utils/config.json';\nimport { getLoginUser, loginUserWithChallenge } from '../lib/threadDb';\nimport { PrivateKey } from '@textile/hub';\n\nfunction MyApp({\n  Component,\n  pageProps\n}) {\n  const {\n    0: themeType,\n    1: setThemeType\n  } = useState('light');\n  const {\n    0: provider,\n    1: setProvider\n  } = useState(null);\n\n  const toggleDarkMode = () => setThemeType(themeType === 'dark' ? 'light' : 'dark');\n\n  const {\n    0: idx,\n    1: setIdx\n  } = useState(null);\n  const {\n    0: ceramic,\n    1: setCeramic\n  } = useState(null);\n  const {\n    0: injectedProvider,\n    1: setInjectedProvider\n  } = useState();\n  const {\n    0: user,\n    1: setUser\n  } = useState(0);\n  const {\n    0: userData,\n    1: setUserData\n  } = useState([]);\n  const {\n    0: identity,\n    1: setIdentity\n  } = useState(null);\n  pageProps['connectUser'] = connectUser;\n  return __jsx(GeistProvider, {\n    theme: {\n      type: themeType\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, __jsx(CssBaseline, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }), __jsx(Component, _extends({}, pageProps, {\n    provider: provider,\n    toggleDarkMode: toggleDarkMode,\n    connectUser: connectUser,\n    handleMagicLinkWeb3: connectUser,\n    user: user,\n    idx: idx,\n    userData: userData,\n    identity: identity,\n    setUserData: setUserData,\n    setUser: setUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  })));\n}\n\nexport default MyApp;","map":{"version":3,"sources":["D:/identity-managment/pages/_app.js"],"names":["React","useState","CssBaseline","GeistProvider","generateSignature","generateIDX","generateIDXForMagic","definitions","getLoginUser","loginUserWithChallenge","PrivateKey","MyApp","Component","pageProps","themeType","setThemeType","provider","setProvider","toggleDarkMode","idx","setIdx","ceramic","setCeramic","injectedProvider","setInjectedProvider","user","setUser","userData","setUserData","identity","setIdentity","connectUser","type"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,EAAsBC,aAAtB,QAA2C,iBAA3C;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SAASC,WAAT,EAAsBC,mBAAtB,QAAiD,iBAAjD;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,YAAT,EAAuBC,sBAAvB,QAAqD,iBAArD;AACA,SAASC,UAAT,QAA2B,cAA3B;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAf,EAAyC;AACvC,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4Bd,QAAQ,CAAC,OAAD,CAA1C;AACA,QAAM;AAAA,OAACe,QAAD;AAAA,OAAWC;AAAX,MAA0BhB,QAAQ,CAAC,IAAD,CAAxC;;AACA,QAAMiB,cAAc,GAAG,MACrBH,YAAY,CAACD,SAAS,KAAK,MAAd,GAAuB,OAAvB,GAAiC,MAAlC,CADd;;AAEA,QAAM;AAAA,OAACK,GAAD;AAAA,OAAMC;AAAN,MAAgBnB,QAAQ,CAAC,IAAD,CAA9B;AACA,QAAM;AAAA,OAACoB,OAAD;AAAA,OAAUC;AAAV,MAAwBrB,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM;AAAA,OAACsB,gBAAD;AAAA,OAAmBC;AAAnB,MAA0CvB,QAAQ,EAAxD;AACA,QAAM;AAAA,OAACwB,IAAD;AAAA,OAAOC;AAAP,MAAkBzB,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM;AAAA,OAAC0B,QAAD;AAAA,OAAWC;AAAX,MAA0B3B,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAAA,OAAC4B,QAAD;AAAA,OAAWC;AAAX,MAA0B7B,QAAQ,CAAC,IAAD,CAAxC;AAEAY,EAAAA,SAAS,CAAC,aAAD,CAAT,GAA2BkB,WAA3B;AAEA,SACE,MAAC,aAAD;AAAe,IAAA,KAAK,EAAE;AAAEC,MAAAA,IAAI,EAAElB;AAAR,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,SAAD,eACMD,SADN;AAEE,IAAA,QAAQ,EAAEG,QAFZ;AAGE,IAAA,cAAc,EAAEE,cAHlB;AAIE,IAAA,WAAW,EAAEa,WAJf;AAKE,IAAA,mBAAmB,EAAEA,WALvB;AAME,IAAA,IAAI,EAAEN,IANR;AAOE,IAAA,GAAG,EAAEN,GAPP;AAQE,IAAA,QAAQ,EAAEQ,QARZ;AASE,IAAA,QAAQ,EAAEE,QATZ;AAUE,IAAA,WAAW,EAAED,WAVf;AAWE,IAAA,OAAO,EAAEF,OAXX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,CADF;AAkBD;;AAED,eAAef,KAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { CssBaseline, GeistProvider } from '@geist-ui/react';\r\nimport { generateSignature } from '../lib/signerConnect';\r\nimport { generateIDX, generateIDXForMagic } from '../lib/identity';\r\nimport { definitions } from '../utils/config.json';\r\nimport { getLoginUser, loginUserWithChallenge } from '../lib/threadDb';\r\nimport { PrivateKey } from '@textile/hub';\r\n\r\nfunction MyApp({ Component, pageProps }) {\r\n  const [themeType, setThemeType] = useState('light');\r\n  const [provider, setProvider] = useState(null);\r\n  const toggleDarkMode = () =>\r\n    setThemeType(themeType === 'dark' ? 'light' : 'dark');\r\n  const [idx, setIdx] = useState(null);\r\n  const [ceramic, setCeramic] = useState(null);\r\n  const [injectedProvider, setInjectedProvider] = useState();\r\n  const [user, setUser] = useState(0);\r\n  const [userData, setUserData] = useState([]);\r\n  const [identity, setIdentity] = useState(null);\r\n\r\n  pageProps['connectUser'] = connectUser;\r\n\r\n  return (\r\n    <GeistProvider theme={{ type: themeType }}>\r\n      <CssBaseline />\r\n      <Component\r\n        {...pageProps}\r\n        provider={provider}\r\n        toggleDarkMode={toggleDarkMode}\r\n        connectUser={connectUser}\r\n        handleMagicLinkWeb3={connectUser}\r\n        user={user}\r\n        idx={idx}\r\n        userData={userData}\r\n        identity={identity}\r\n        setUserData={setUserData}\r\n        setUser={setUser}\r\n      />\r\n    </GeistProvider>\r\n  );\r\n}\r\n\r\nexport default MyApp;\r\n"]},"metadata":{},"sourceType":"module"}