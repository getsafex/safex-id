{"ast":null,"code":"import Ceramic from '@ceramicnetwork/http-client';\nimport { IDX } from '@ceramicstudio/idx';\nimport { Ed25519Provider } from 'key-did-provider-ed25519';\nimport { definitions } from \"../utils/config.json\";\nimport { BigNumber, utils, ethers } from 'ethers';\nimport { hashSync } from 'bcryptjs';\nconst CERAMIC_URL = 'https://ceramic.signchain.xyz';\nexport const generateIDX = async seed => {\n  // avoid sending the raw secret by hashing it first\n  try {\n    if (seed) {\n      const ceramic = new Ceramic(CERAMIC_URL);\n      await ceramic.setDIDProvider(new Ed25519Provider(seed)); // Create the IDX instance with the definitions aliases from the config\n\n      const idx = new IDX({\n        ceramic,\n        aliases: definitions\n      });\n      return {\n        idx,\n        ceramic\n      };\n    } else {\n      return {\n        idx: null,\n        ceramic: null\n      };\n    }\n  } catch (error) {\n    console.log(error);\n    return {\n      idx: null,\n      ceramic: null\n    };\n  }\n}; // export const generateIDXForMagic = async (provider) => {\n//   // avoid sending the raw secret by hashing it first\n//   try{\n//     if(provider){\n//       const ceramic = new Ceramic(CERAMIC_URL)\n//       await ceramic.setDIDProvider(new Ed25519Provider(seed))\n//       // Create the IDX instance with the definitions aliases from the config\n//       const idx = new IDX({ ceramic, aliases: definitions })\n//       console.log(idx);\n//       return {idx, ceramic, seed}\n//     }else{\n//       return {idx: null, ceramic: null, seed: null}\n//     }\n//   }catch(error){\n//       console.log(error)\n//       return {idx: null, ceramic: null, seed: null}\n//   }\n// }","map":{"version":3,"sources":["D:/identity-managment/lib/identity.js"],"names":["Ceramic","IDX","Ed25519Provider","definitions","BigNumber","utils","ethers","hashSync","CERAMIC_URL","generateIDX","seed","ceramic","setDIDProvider","idx","aliases","error","console","log"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,6BAApB;AACA,SAAQC,GAAR,QAAkB,oBAAlB;AACA,SAAQC,eAAR,QAA8B,0BAA9B;AACA,SAAQC,WAAR,QAA0B,sBAA1B;AACA,SAASC,SAAT,EAAoBC,KAApB,EAA2BC,MAA3B,QAAyC,QAAzC;AACA,SAASC,QAAT,QAAyB,UAAzB;AAEA,MAAMC,WAAW,GAAG,+BAApB;AAGA,OAAO,MAAMC,WAAW,GAAG,MAAOC,IAAP,IAAgB;AACvC;AACA,MAAG;AACD,QAAGA,IAAH,EAAQ;AACN,YAAMC,OAAO,GAAG,IAAIX,OAAJ,CAAYQ,WAAZ,CAAhB;AACA,YAAMG,OAAO,CAACC,cAAR,CAAuB,IAAIV,eAAJ,CAAoBQ,IAApB,CAAvB,CAAN,CAFM,CAGN;;AACA,YAAMG,GAAG,GAAG,IAAIZ,GAAJ,CAAQ;AAAEU,QAAAA,OAAF;AAAWG,QAAAA,OAAO,EAAEX;AAApB,OAAR,CAAZ;AACA,aAAO;AAACU,QAAAA,GAAD;AAAMF,QAAAA;AAAN,OAAP;AACD,KAND,MAMK;AACH,aAAO;AAACE,QAAAA,GAAG,EAAE,IAAN;AAAYF,QAAAA,OAAO,EAAE;AAArB,OAAP;AACD;AACF,GAVD,CAUC,OAAMI,KAAN,EAAY;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,WAAO;AAACF,MAAAA,GAAG,EAAE,IAAN;AAAYF,MAAAA,OAAO,EAAE;AAArB,KAAP;AACH;AAEF,CAjBI,C,CAqBL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA","sourcesContent":["import Ceramic from '@ceramicnetwork/http-client'\r\nimport {IDX} from '@ceramicstudio/idx'\r\nimport {Ed25519Provider} from 'key-did-provider-ed25519'\r\nimport {definitions} from \"../utils/config.json\"\r\nimport { BigNumber, utils, ethers } from 'ethers'\r\nimport { hashSync } from 'bcryptjs'\r\n\r\nconst CERAMIC_URL = 'https://ceramic.signchain.xyz'\r\n\r\n\r\nexport const generateIDX = async (seed) => {\r\n    // avoid sending the raw secret by hashing it first\r\n    try{\r\n      if(seed){\r\n        const ceramic = new Ceramic(CERAMIC_URL)\r\n        await ceramic.setDIDProvider(new Ed25519Provider(seed))\r\n        // Create the IDX instance with the definitions aliases from the config\r\n        const idx = new IDX({ ceramic, aliases: definitions })\r\n        return {idx, ceramic}\r\n      }else{\r\n        return {idx: null, ceramic: null}\r\n      }\r\n    }catch(error){\r\n        console.log(error)\r\n        return {idx: null, ceramic: null}\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  // export const generateIDXForMagic = async (provider) => {\r\n  //   // avoid sending the raw secret by hashing it first\r\n  //   try{\r\n  //     if(provider){\r\n  //       const ceramic = new Ceramic(CERAMIC_URL)\r\n  //       await ceramic.setDIDProvider(new Ed25519Provider(seed))\r\n  //       // Create the IDX instance with the definitions aliases from the config\r\n  //       const idx = new IDX({ ceramic, aliases: definitions })\r\n  //       console.log(idx);\r\n  //       return {idx, ceramic, seed}\r\n  //     }else{\r\n  //       return {idx: null, ceramic: null, seed: null}\r\n  //     }\r\n      \r\n  //   }catch(error){\r\n  //       console.log(error)\r\n  //       return {idx: null, ceramic: null, seed: null}\r\n  //   }\r\n\r\n  // }\r\n"]},"metadata":{},"sourceType":"module"}