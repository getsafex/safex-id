{"ast":null,"code":"var _jsxFileName = \"D:\\\\identity-managment\\\\pages\\\\_app.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport { CssBaseline, GeistProvider } from '@geist-ui/react';\nimport { generateSignature } from \"../lib/signerConnect\";\nimport { generateIDX, generateIDXForMagic } from '../lib/identity';\nimport { definitions } from '../utils/config.json';\nimport { getLoginUser, loginUserWithChallenge } from '../lib/threadDb';\nimport { PrivateKey } from \"@textile/hub\"; // const getDefaultTheme = () =>\n//   window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n\nfunction MyApp({\n  Component,\n  pageProps\n}) {\n  const {\n    0: themeType,\n    1: setThemeType\n  } = useState('light');\n  const {\n    0: provider,\n    1: setProvider\n  } = useState(null);\n\n  const toggleDarkMode = () => setThemeType(themeType === 'dark' ? 'light' : 'dark');\n\n  const {\n    0: idx,\n    1: setIdx\n  } = useState(null);\n  const {\n    0: ceramic,\n    1: setCeramic\n  } = useState(null);\n  const {\n    0: injectedProvider,\n    1: setInjectedProvider\n  } = useState();\n  const {\n    0: user,\n    1: setUser\n  } = useState(0);\n  const {\n    0: userData,\n    1: setUserData\n  } = useState([]);\n  const {\n    0: identity,\n    1: setIdentity\n  } = useState(null); // if (window.matchMedia) {\n  //   const colorSchemeQuery = window.matchMedia('(prefers-color-scheme: dark)');\n  //   colorSchemeQuery.onchange = (e) => setThemeType(e.matches ? 'dark' : 'light');\n  // }\n\n  const connectUser = async provider => {\n    console.log('connect');\n    const {\n      seed,\n      web3Provider\n    } = await generateSignature(provider);\n    setProvider(web3Provider);\n    const {\n      idx,\n      ceramic\n    } = await generateIDX(seed);\n    setIdx(idx);\n    const identity = PrivateKey.fromRawEd25519Seed(Uint8Array.from(seed));\n    setIdentity(identity);\n    let threadData = null;\n    const client = await loginUserWithChallenge(identity);\n\n    if (client !== null) {\n      //call middleWare\n      setCeramic(ceramic);\n      threadData = await getLoginUser(idx.id);\n\n      if (!localStorage.getItem(\"USER\")) {\n        localStorage.setItem(\"USER\", JSON.stringify(threadData));\n      }\n    }\n\n    const data = await idx.get(definitions.profile, idx.id);\n    setUserData(threadData);\n    setUser(threadData && data ? 2 : 1);\n    return {\n      idx,\n      identity,\n      threadData\n    };\n  };\n  /*const handleMagicLinkWeb3 = async (provider) => {\r\n    try{\r\n      connectUser(provider)\r\n    }catch(err){\r\n      console.log(err)\r\n    }\r\n  }*/\n\n\n  pageProps['connectUser'] = connectUser;\n  return __jsx(GeistProvider, {\n    theme: {\n      type: themeType\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, __jsx(CssBaseline, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }), __jsx(Component, _extends({}, pageProps, {\n    provider: provider,\n    toggleDarkMode: toggleDarkMode,\n    connectUser: connectUser,\n    handleMagicLinkWeb3: connectUser,\n    user: user,\n    idx: idx,\n    userData: userData,\n    identity: identity,\n    setUserData: setUserData,\n    setUser: setUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  })));\n}\n\nexport default MyApp;","map":{"version":3,"sources":["D:/identity-managment/pages/_app.js"],"names":["React","useState","CssBaseline","GeistProvider","generateSignature","generateIDX","generateIDXForMagic","definitions","getLoginUser","loginUserWithChallenge","PrivateKey","MyApp","Component","pageProps","themeType","setThemeType","provider","setProvider","toggleDarkMode","idx","setIdx","ceramic","setCeramic","injectedProvider","setInjectedProvider","user","setUser","userData","setUserData","identity","setIdentity","connectUser","console","log","seed","web3Provider","fromRawEd25519Seed","Uint8Array","from","threadData","client","id","localStorage","getItem","setItem","JSON","stringify","data","get","profile","type"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,WAAR,EAAqBC,aAArB,QAAyC,iBAAzC;AACA,SAAQC,iBAAR,QAAgC,sBAAhC;AACA,SAAQC,WAAR,EAAqBC,mBAArB,QAA+C,iBAA/C;AACA,SAAQC,WAAR,QAA0B,sBAA1B;AACA,SAAQC,YAAR,EAAsBC,sBAAtB,QAAmD,iBAAnD;AACA,SAAQC,UAAR,QAAyB,cAAzB,C,CAGA;AACA;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAf,EAAyC;AAEvC,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4Bd,QAAQ,CAAC,OAAD,CAA1C;AACA,QAAM;AAAA,OAACe,QAAD;AAAA,OAAWC;AAAX,MAA0BhB,QAAQ,CAAC,IAAD,CAAxC;;AACA,QAAMiB,cAAc,GAAG,MAAMH,YAAY,CAACD,SAAS,KAAK,MAAd,GAAuB,OAAvB,GAAiC,MAAlC,CAAzC;;AACA,QAAM;AAAA,OAACK,GAAD;AAAA,OAAMC;AAAN,MAAgBnB,QAAQ,CAAC,IAAD,CAA9B;AACA,QAAM;AAAA,OAACoB,OAAD;AAAA,OAAUC;AAAV,MAAwBrB,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM;AAAA,OAACsB,gBAAD;AAAA,OAAmBC;AAAnB,MAA0CvB,QAAQ,EAAxD;AACA,QAAM;AAAA,OAACwB,IAAD;AAAA,OAAOC;AAAP,MAAkBzB,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM;AAAA,OAAC0B,QAAD;AAAA,OAAWC;AAAX,MAAyB3B,QAAQ,CAAC,EAAD,CAAvC;AACA,QAAM;AAAA,OAAC4B,QAAD;AAAA,OAAWC;AAAX,MAA0B7B,QAAQ,CAAC,IAAD,CAAxC,CAVuC,CAWvC;AACA;AACA;AACA;;AAEF,QAAM8B,WAAW,GAAG,MAAOf,QAAP,IAAoB;AACtCgB,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,UAAM;AAACC,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAuB,MAAM/B,iBAAiB,CAACY,QAAD,CAApD;AACAC,IAAAA,WAAW,CAACkB,YAAD,CAAX;AACA,UAAM;AAAChB,MAAAA,GAAD;AAAME,MAAAA;AAAN,QAAiB,MAAMhB,WAAW,CAAC6B,IAAD,CAAxC;AACAd,IAAAA,MAAM,CAACD,GAAD,CAAN;AAEA,UAAMU,QAAQ,GAAGnB,UAAU,CAAC0B,kBAAX,CAA8BC,UAAU,CAACC,IAAX,CAAgBJ,IAAhB,CAA9B,CAAjB;AACAJ,IAAAA,WAAW,CAACD,QAAD,CAAX;AACA,QAAIU,UAAU,GAAG,IAAjB;AACA,UAAMC,MAAM,GAAG,MAAM/B,sBAAsB,CAACoB,QAAD,CAA3C;;AACA,QAAIW,MAAM,KAAK,IAAf,EAAqB;AACnB;AACAlB,MAAAA,UAAU,CAACD,OAAD,CAAV;AACAkB,MAAAA,UAAU,GAAG,MAAM/B,YAAY,CAACW,GAAG,CAACsB,EAAL,CAA/B;;AACA,UAAI,CAACC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAL,EAAmC;AACjCD,QAAAA,YAAY,CAACE,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeP,UAAf,CAA7B;AACD;AACF;;AACD,UAAMQ,IAAI,GAAG,MAAM5B,GAAG,CAAC6B,GAAJ,CAAQzC,WAAW,CAAC0C,OAApB,EAA6B9B,GAAG,CAACsB,EAAjC,CAAnB;AACAb,IAAAA,WAAW,CAACW,UAAD,CAAX;AACAb,IAAAA,OAAO,CAAEa,UAAU,IAAIQ,IAAf,GAAuB,CAAvB,GAA2B,CAA5B,CAAP;AACA,WAAO;AAAC5B,MAAAA,GAAD;AAAMU,MAAAA,QAAN;AAAgBU,MAAAA;AAAhB,KAAP;AACD,GAvBD;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA1B,EAAAA,SAAS,CAAC,aAAD,CAAT,GAA2BkB,WAA3B;AAEE,SACE,MAAC,aAAD;AAAe,IAAA,KAAK,EAAE;AAAEmB,MAAAA,IAAI,EAAEpC;AAAR,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,SAAD,eACQD,SADR;AAEI,IAAA,QAAQ,EAAEG,QAFd;AAGI,IAAA,cAAc,EAAEE,cAHpB;AAII,IAAA,WAAW,EAAEa,WAJjB;AAKI,IAAA,mBAAmB,EAAEA,WALzB;AAMI,IAAA,IAAI,EAAEN,IANV;AAOI,IAAA,GAAG,EAAEN,GAPT;AAQI,IAAA,QAAQ,EAAEQ,QARd;AASI,IAAA,QAAQ,EAAEE,QATd;AAUI,IAAA,WAAW,EAAED,WAVjB;AAWI,IAAA,OAAO,EAAEF,OAXb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,CADF;AAkBD;;AAGD,eAAef,KAAf","sourcesContent":["import React, {useState} from 'react'\r\nimport {CssBaseline, GeistProvider} from '@geist-ui/react'\r\nimport {generateSignature} from \"../lib/signerConnect\"\r\nimport {generateIDX, generateIDXForMagic} from '../lib/identity'\r\nimport {definitions} from '../utils/config.json'\r\nimport {getLoginUser, loginUserWithChallenge} from '../lib/threadDb';\r\nimport {PrivateKey} from \"@textile/hub\";\r\n\r\n\r\n// const getDefaultTheme = () =>\r\n//   window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\r\n\r\nfunction MyApp({ Component, pageProps }) {\r\n\r\n  const [themeType, setThemeType] = useState('light');\r\n  const [provider, setProvider] = useState(null);\r\n  const toggleDarkMode = () => setThemeType(themeType === 'dark' ? 'light' : 'dark');\r\n  const [idx, setIdx] = useState(null);\r\n  const [ceramic, setCeramic] = useState(null);\r\n  const [injectedProvider, setInjectedProvider] = useState();\r\n  const [user, setUser] = useState(0);\r\n  const [userData, setUserData] =useState([]);\r\n  const [identity, setIdentity] = useState(null);\r\n  // if (window.matchMedia) {\r\n  //   const colorSchemeQuery = window.matchMedia('(prefers-color-scheme: dark)');\r\n  //   colorSchemeQuery.onchange = (e) => setThemeType(e.matches ? 'dark' : 'light');\r\n  // }\r\n\r\nconst connectUser = async (provider) => {\r\n  console.log('connect')\r\n  const {seed, web3Provider} = await generateSignature(provider);\r\n  setProvider(web3Provider)\r\n  const {idx, ceramic} = await generateIDX(seed);\r\n  setIdx(idx)\r\n\r\n  const identity = PrivateKey.fromRawEd25519Seed(Uint8Array.from(seed))\r\n  setIdentity(identity)\r\n  let threadData = null\r\n  const client = await loginUserWithChallenge(identity);\r\n  if (client !== null) {\r\n    //call middleWare\r\n    setCeramic(ceramic)\r\n    threadData = await getLoginUser(idx.id)\r\n    if (!localStorage.getItem(\"USER\")) {\r\n      localStorage.setItem(\"USER\", JSON.stringify(threadData))\r\n    }\r\n  }\r\n  const data = await idx.get(definitions.profile, idx.id)\r\n  setUserData(threadData)\r\n  setUser((threadData && data) ? 2 : 1)\r\n  return {idx, identity, threadData}\r\n}\r\n\r\n/*const handleMagicLinkWeb3 = async (provider) => {\r\n  try{\r\n    connectUser(provider)\r\n  }catch(err){\r\n    console.log(err)\r\n  }\r\n}*/\r\n\r\n\r\npageProps['connectUser'] = connectUser\r\n\r\n  return (\r\n    <GeistProvider theme={{ type: themeType }}>\r\n      <CssBaseline />\r\n      <Component\r\n          {...pageProps}\r\n          provider={provider}\r\n          toggleDarkMode={toggleDarkMode}\r\n          connectUser={connectUser}\r\n          handleMagicLinkWeb3={connectUser}\r\n          user={user}\r\n          idx={idx}\r\n          userData={userData}\r\n          identity={identity}\r\n          setUserData={setUserData}\r\n          setUser={setUser}\r\n      />\r\n    </GeistProvider>\r\n  )\r\n}\r\n\r\n\r\nexport default MyApp\r\n"]},"metadata":{},"sourceType":"module"}