{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"D:\\\\identity-managment\\\\pages\\\\_app.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { CssBaseline, GeistProvider } from '@geist-ui/react';\nimport { generateSignature } from \"../lib/signerConnect\";\nimport { generateIDX, generateIDXForMagic } from '../lib/identity';\nimport { definitions } from '../utils/config.json';\nimport { getLoginUser, loginUserWithChallenge } from '../lib/threadDb';\nimport { PrivateKey } from \"@textile/hub\"; // const getDefaultTheme = () =>\n//   window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n\nfunction MyApp(_ref) {\n  _s();\n\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n\n  var _useState = useState('light'),\n      themeType = _useState[0],\n      setThemeType = _useState[1];\n\n  var _useState2 = useState(null),\n      provider = _useState2[0],\n      setProvider = _useState2[1];\n\n  var toggleDarkMode = function toggleDarkMode() {\n    return setThemeType(themeType === 'dark' ? 'light' : 'dark');\n  };\n\n  var _useState3 = useState(null),\n      idx = _useState3[0],\n      setIdx = _useState3[1];\n\n  var _useState4 = useState(null),\n      ceramic = _useState4[0],\n      setCeramic = _useState4[1];\n\n  var _useState5 = useState(),\n      injectedProvider = _useState5[0],\n      setInjectedProvider = _useState5[1];\n\n  var _useState6 = useState(0),\n      user = _useState6[0],\n      setUser = _useState6[1];\n\n  var _useState7 = useState([]),\n      userData = _useState7[0],\n      setUserData = _useState7[1];\n\n  var _useState8 = useState(null),\n      identity = _useState8[0],\n      setIdentity = _useState8[1]; // if (window.matchMedia) {\n  //   const colorSchemeQuery = window.matchMedia('(prefers-color-scheme: dark)');\n  //   colorSchemeQuery.onchange = (e) => setThemeType(e.matches ? 'dark' : 'light');\n  // }\n\n\n  var connectUser = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(provider) {\n      var _yield$generateSignat, seed, web3Provider, _yield$generateIDX, idx, ceramic, identity, threadData, client, data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log('connect');\n              _context.next = 3;\n              return generateSignature(provider);\n\n            case 3:\n              _yield$generateSignat = _context.sent;\n              seed = _yield$generateSignat.seed;\n              web3Provider = _yield$generateSignat.web3Provider;\n              setProvider(web3Provider);\n              _context.next = 9;\n              return generateIDX(seed);\n\n            case 9:\n              _yield$generateIDX = _context.sent;\n              idx = _yield$generateIDX.idx;\n              ceramic = _yield$generateIDX.ceramic;\n              setIdx(idx);\n              identity = PrivateKey.fromRawEd25519Seed(Uint8Array.from(seed));\n              setIdentity(identity);\n              threadData = null;\n              _context.next = 18;\n              return loginUserWithChallenge(identity);\n\n            case 18:\n              client = _context.sent;\n\n              if (!(client !== null)) {\n                _context.next = 25;\n                break;\n              }\n\n              //call middleWare\n              setCeramic(ceramic);\n              _context.next = 23;\n              return getLoginUser(idx.id);\n\n            case 23:\n              threadData = _context.sent;\n\n              if (!localStorage.getItem(\"USER\")) {\n                localStorage.setItem(\"USER\", JSON.stringify(threadData));\n              }\n\n            case 25:\n              _context.next = 27;\n              return idx.get(definitions.profile, idx.id);\n\n            case 27:\n              data = _context.sent;\n              setUserData(threadData);\n              setUser(threadData && data ? 2 : 1);\n              return _context.abrupt(\"return\", {\n                idx: idx,\n                identity: identity,\n                threadData: threadData\n              });\n\n            case 31:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function connectUser(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /*const handleMagicLinkWeb3 = async (provider) => {\r\n    try{\r\n      connectUser(provider)\r\n    }catch(err){\r\n      console.log(err)\r\n    }\r\n  }*/\n\n\n  pageProps['connectUser'] = connectUser;\n  return __jsx(GeistProvider, {\n    theme: {\n      type: themeType\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, __jsx(CssBaseline, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }), __jsx(Component, _extends({}, pageProps, {\n    provider: provider,\n    toggleDarkMode: toggleDarkMode,\n    connectUser: connectUser,\n    handleMagicLinkWeb3: connectUser,\n    user: user,\n    idx: idx,\n    userData: userData,\n    identity: identity,\n    setUserData: setUserData,\n    setUser: setUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  })));\n}\n\n_s(MyApp, \"Xkqmum9ryy+cxPtRWDS8QlSi0/Y=\");\n\n_c = MyApp;\nexport default MyApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyApp\");","map":{"version":3,"sources":["D:/identity-managment/pages/_app.js"],"names":["React","useState","CssBaseline","GeistProvider","generateSignature","generateIDX","generateIDXForMagic","definitions","getLoginUser","loginUserWithChallenge","PrivateKey","MyApp","Component","pageProps","themeType","setThemeType","provider","setProvider","toggleDarkMode","idx","setIdx","ceramic","setCeramic","injectedProvider","setInjectedProvider","user","setUser","userData","setUserData","identity","setIdentity","connectUser","console","log","seed","web3Provider","fromRawEd25519Seed","Uint8Array","from","threadData","client","id","localStorage","getItem","setItem","JSON","stringify","get","profile","data","type"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\r\nimport {CssBaseline, GeistProvider} from '@geist-ui/react'\r\nimport {generateSignature} from \"../lib/signerConnect\"\r\nimport {generateIDX, generateIDXForMagic} from '../lib/identity'\r\nimport {definitions} from '../utils/config.json'\r\nimport {getLoginUser, loginUserWithChallenge} from '../lib/threadDb';\r\nimport {PrivateKey} from \"@textile/hub\";\r\n\r\n\r\n// const getDefaultTheme = () =>\r\n//   window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\r\n\r\nfunction MyApp({ Component, pageProps }) {\r\n\r\n  const [themeType, setThemeType] = useState('light');\r\n  const [provider, setProvider] = useState(null);\r\n  const toggleDarkMode = () => setThemeType(themeType === 'dark' ? 'light' : 'dark');\r\n  const [idx, setIdx] = useState(null);\r\n  const [ceramic, setCeramic] = useState(null);\r\n  const [injectedProvider, setInjectedProvider] = useState();\r\n  const [user, setUser] = useState(0);\r\n  const [userData, setUserData] =useState([]);\r\n  const [identity, setIdentity] = useState(null);\r\n  // if (window.matchMedia) {\r\n  //   const colorSchemeQuery = window.matchMedia('(prefers-color-scheme: dark)');\r\n  //   colorSchemeQuery.onchange = (e) => setThemeType(e.matches ? 'dark' : 'light');\r\n  // }\r\n\r\nconst connectUser = async (provider) => {\r\n  console.log('connect')\r\n  const {seed, web3Provider} = await generateSignature(provider);\r\n  setProvider(web3Provider)\r\n  const {idx, ceramic} = await generateIDX(seed);\r\n  setIdx(idx)\r\n\r\n  const identity = PrivateKey.fromRawEd25519Seed(Uint8Array.from(seed))\r\n  setIdentity(identity)\r\n  let threadData = null\r\n  const client = await loginUserWithChallenge(identity);\r\n  if (client !== null) {\r\n    //call middleWare\r\n    setCeramic(ceramic)\r\n    threadData = await getLoginUser(idx.id)\r\n    if (!localStorage.getItem(\"USER\")) {\r\n      localStorage.setItem(\"USER\", JSON.stringify(threadData))\r\n    }\r\n  }\r\n  const data = await idx.get(definitions.profile, idx.id)\r\n  setUserData(threadData)\r\n  setUser((threadData && data) ? 2 : 1)\r\n  return {idx, identity, threadData}\r\n}\r\n\r\n/*const handleMagicLinkWeb3 = async (provider) => {\r\n  try{\r\n    connectUser(provider)\r\n  }catch(err){\r\n    console.log(err)\r\n  }\r\n}*/\r\n\r\n\r\npageProps['connectUser'] = connectUser\r\n\r\n  return (\r\n    <GeistProvider theme={{ type: themeType }}>\r\n      <CssBaseline />\r\n      <Component\r\n          {...pageProps}\r\n          provider={provider}\r\n          toggleDarkMode={toggleDarkMode}\r\n          connectUser={connectUser}\r\n          handleMagicLinkWeb3={connectUser}\r\n          user={user}\r\n          idx={idx}\r\n          userData={userData}\r\n          identity={identity}\r\n          setUserData={setUserData}\r\n          setUser={setUser}\r\n      />\r\n    </GeistProvider>\r\n  )\r\n}\r\n\r\n\r\nexport default MyApp\r\n"]},"metadata":{},"sourceType":"module"}