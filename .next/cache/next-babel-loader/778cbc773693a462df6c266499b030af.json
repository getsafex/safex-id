{"ast":null,"code":"var _jsxFileName = \"D:\\\\identity-managment\\\\components\\\\auth\\\\SignUp.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { useToasts, Modal, Input } from '@geist-ui/react';\nimport * as Icons from 'react-feather';\nimport makeStyles from '../makeStyles';\nimport { definitions } from '../../utils/config.json'; // import {\n//   generateCipherKey,\n//   loginUserWithChallenge,\n//   registerNewUser,\n//   checkEmailExists,\n// } from '../../lib/threadDb';\n\nconst useStyles = makeStyles(ui => ({\n  form: {\n    display: ' flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  input: {\n    margin: '6px 0'\n  },\n  inputField: {\n    width: '310px !important'\n  }\n}));\n\nfunction SignUp({\n  user,\n  idx,\n  setUserData,\n  identity,\n  setUser\n}) {\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const {\n    0: name,\n    1: setName\n  } = useState('');\n  const {\n    0: modal,\n    1: setModal\n  } = useState(false);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const [signUpToast, setToast] = useToasts(false);\n  useEffect(() => {\n    setModal(user === 1);\n  }, [user]);\n\n  const closeHandler = event => {\n    setModal(false);\n  };\n\n  const classes = useStyles();\n\n  const handleSubmit = async () => {\n    //ceramic and threaddb\n    const aesKey = await generateCipherKey();\n\n    if (idx) {\n      setLoading(true);\n      const client = await loginUserWithChallenge(identity);\n\n      if (client != null) {\n        const {\n          status\n        } = await checkEmailExists(email);\n\n        if (status) {\n          const enc = await idx.ceramic.did.createDagJWE(aesKey, [idx.id]);\n          const ceramicRes = await idx.set(definitions.profile, {\n            name: name,\n            email: email\n          });\n          const encCeramic = await idx.set(definitions.encryptionKey, {\n            key: enc\n          });\n          const threadRes = await registerNewUser(idx.id, name, email, enc, 0);\n          setUserData(threadRes);\n\n          if (ceramicRes && threadRes) {\n            setLoading(false);\n            setModal(false);\n            setUser(2);\n          }\n        } else {\n          setToast({\n            text: 'This Email already Exists, Please try with new Email',\n            type: 'warning',\n            delay: 5000\n          });\n          setLoading(false);\n          setModal(true); //setUser(0)\n        }\n      } else {\n        console.log('Not authenticated with server!!!');\n        setLoading(false);\n        setModal(false);\n      }\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Modal, {\n    open: modal,\n    onClose: closeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, __jsx(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, \"Sign up \"), __jsx(Modal.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: classes.form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: classes.input,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, __jsx(Input, {\n    placeholder: \"Enter your Name\",\n    icon: __jsx(Icons.User, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 23\n      }\n    }),\n    className: classes.inputField,\n    onChange: e => setName(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  })), __jsx(\"div\", {\n    className: classes.input,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, __jsx(Input, {\n    value: email,\n    placeholder: \"johndoe@domain.com\",\n    icon: __jsx(Icons.Mail, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 23\n      }\n    }),\n    className: classes.inputField,\n    onChange: e => setEmail(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 15\n    }\n  })))), __jsx(Modal.Action, {\n    passive: true,\n    onClick: () => setModal(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, \"Cancel\"), __jsx(Modal.Action, {\n    onClick: handleSubmit,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, \"Submit\")));\n}\n\nexport default SignUp;","map":{"version":3,"sources":["D:/identity-managment/components/auth/SignUp.js"],"names":["React","useEffect","useState","useToasts","Modal","Input","Icons","makeStyles","definitions","useStyles","ui","form","display","flexDirection","justifyContent","alignItems","input","margin","inputField","width","SignUp","user","idx","setUserData","identity","setUser","email","setEmail","name","setName","modal","setModal","loading","setLoading","signUpToast","setToast","closeHandler","event","classes","handleSubmit","aesKey","generateCipherKey","client","loginUserWithChallenge","status","checkEmailExists","enc","ceramic","did","createDagJWE","id","ceramicRes","set","profile","encCeramic","encryptionKey","key","threadRes","registerNewUser","text","type","delay","console","log","e","target","value"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,KAApB,EAA2BC,KAA3B,QAAwC,iBAAxC;AACA,OAAO,KAAKC,KAAZ,MAAuB,eAAvB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,SAASC,WAAT,QAA4B,yBAA5B,C,CACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAGF,UAAU,CAAEG,EAAD,KAAS;AACpCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE,OADL;AAEJC,IAAAA,aAAa,EAAE,QAFX;AAGJC,IAAAA,cAAc,EAAE,QAHZ;AAIJC,IAAAA,UAAU,EAAE;AAJR,GAD8B;AAOpCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAE;AADH,GAP6B;AAUpCC,EAAAA,UAAU,EAAE;AACVC,IAAAA,KAAK,EAAE;AADG;AAVwB,CAAT,CAAD,CAA5B;;AAeA,SAASC,MAAT,CAAgB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,GAAR;AAAaC,EAAAA,WAAb;AAA0BC,EAAAA,QAA1B;AAAoCC,EAAAA;AAApC,CAAhB,EAA+D;AAC7D,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBzB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAAC0B,IAAD;AAAA,OAAOC;AAAP,MAAkB3B,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AAAA,OAAC4B,KAAD;AAAA,OAAQC;AAAR,MAAoB7B,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM;AAAA,OAAC8B,OAAD;AAAA,OAAUC;AAAV,MAAwB/B,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACgC,WAAD,EAAcC,QAAd,IAA0BhC,SAAS,CAAC,KAAD,CAAzC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd8B,IAAAA,QAAQ,CAACV,IAAI,KAAK,CAAV,CAAR;AACD,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT;;AAIA,QAAMe,YAAY,GAAIC,KAAD,IAAW;AAC9BN,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACD,GAFD;;AAGA,QAAMO,OAAO,GAAG7B,SAAS,EAAzB;;AAEA,QAAM8B,YAAY,GAAG,YAAY;AAC/B;AACA,UAAMC,MAAM,GAAG,MAAMC,iBAAiB,EAAtC;;AACA,QAAInB,GAAJ,EAAS;AACPW,MAAAA,UAAU,CAAC,IAAD,CAAV;AAEA,YAAMS,MAAM,GAAG,MAAMC,sBAAsB,CAACnB,QAAD,CAA3C;;AACA,UAAIkB,MAAM,IAAI,IAAd,EAAoB;AAClB,cAAM;AAAEE,UAAAA;AAAF,YAAa,MAAMC,gBAAgB,CAACnB,KAAD,CAAzC;;AACA,YAAIkB,MAAJ,EAAY;AACV,gBAAME,GAAG,GAAG,MAAMxB,GAAG,CAACyB,OAAJ,CAAYC,GAAZ,CAAgBC,YAAhB,CAA6BT,MAA7B,EAAqC,CAAClB,GAAG,CAAC4B,EAAL,CAArC,CAAlB;AAEA,gBAAMC,UAAU,GAAG,MAAM7B,GAAG,CAAC8B,GAAJ,CAAQ5C,WAAW,CAAC6C,OAApB,EAA6B;AACpDzB,YAAAA,IAAI,EAAEA,IAD8C;AAEpDF,YAAAA,KAAK,EAAEA;AAF6C,WAA7B,CAAzB;AAKA,gBAAM4B,UAAU,GAAG,MAAMhC,GAAG,CAAC8B,GAAJ,CAAQ5C,WAAW,CAAC+C,aAApB,EAAmC;AAC1DC,YAAAA,GAAG,EAAEV;AADqD,WAAnC,CAAzB;AAIA,gBAAMW,SAAS,GAAG,MAAMC,eAAe,CAACpC,GAAG,CAAC4B,EAAL,EAAStB,IAAT,EAAeF,KAAf,EAAsBoB,GAAtB,EAA2B,CAA3B,CAAvC;AAEAvB,UAAAA,WAAW,CAACkC,SAAD,CAAX;;AACA,cAAIN,UAAU,IAAIM,SAAlB,EAA6B;AAC3BxB,YAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,YAAAA,QAAQ,CAAC,KAAD,CAAR;AACAN,YAAAA,OAAO,CAAC,CAAD,CAAP;AACD;AACF,SApBD,MAoBO;AACLU,UAAAA,QAAQ,CAAC;AACPwB,YAAAA,IAAI,EAAE,sDADC;AAEPC,YAAAA,IAAI,EAAE,SAFC;AAGPC,YAAAA,KAAK,EAAE;AAHA,WAAD,CAAR;AAMA5B,UAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,UAAAA,QAAQ,CAAC,IAAD,CAAR,CARK,CASL;AACD;AACF,OAjCD,MAiCO;AACL+B,QAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACA9B,QAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,QAAAA,QAAQ,CAAC,KAAD,CAAR;AACD;AACF;AACF,GA9CD;;AAgDA,SACE,4BACE,MAAC,KAAD;AAAO,IAAA,IAAI,EAAED,KAAb;AAAoB,IAAA,OAAO,EAAEM,YAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD,CAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAGE,MAAC,KAAD,CAAO,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAEE,OAAO,CAAC3B,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAE2B,OAAO,CAACtB,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AACE,IAAA,WAAW,EAAC,iBADd;AAEE,IAAA,IAAI,EAAE,MAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFR;AAGE,IAAA,SAAS,EAAEsB,OAAO,CAACpB,UAHrB;AAIE,IAAA,QAAQ,EAAG8C,CAAD,IAAOnC,OAAO,CAACmC,CAAC,CAACC,MAAF,CAASC,KAAV,CAJ1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EASE;AAAK,IAAA,SAAS,EAAE5B,OAAO,CAACtB,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AACE,IAAA,KAAK,EAAEU,KADT;AAEE,IAAA,WAAW,EAAC,oBAFd;AAGE,IAAA,IAAI,EAAE,MAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHR;AAIE,IAAA,SAAS,EAAEY,OAAO,CAACpB,UAJrB;AAKE,IAAA,QAAQ,EAAG8C,CAAD,IAAOrC,QAAQ,CAACqC,CAAC,CAACC,MAAF,CAASC,KAAV,CAL3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CATF,CADF,CAHF,EAwBE,MAAC,KAAD,CAAO,MAAP;AAAc,IAAA,OAAO,MAArB;AAAsB,IAAA,OAAO,EAAE,MAAMnC,QAAQ,CAAC,KAAD,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAxBF,EA2BE,MAAC,KAAD,CAAO,MAAP;AAAc,IAAA,OAAO,EAAEQ,YAAvB;AAAqC,IAAA,OAAO,EAAEP,OAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA3BF,CADF,CADF;AAmCD;;AAED,eAAeZ,MAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useToasts, Modal, Input } from '@geist-ui/react';\r\nimport * as Icons from 'react-feather';\r\nimport makeStyles from '../makeStyles';\r\nimport { definitions } from '../../utils/config.json';\r\n// import {\r\n//   generateCipherKey,\r\n//   loginUserWithChallenge,\r\n//   registerNewUser,\r\n//   checkEmailExists,\r\n// } from '../../lib/threadDb';\r\n\r\nconst useStyles = makeStyles((ui) => ({\r\n  form: {\r\n    display: ' flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  input: {\r\n    margin: '6px 0',\r\n  },\r\n  inputField: {\r\n    width: '310px !important',\r\n  },\r\n}));\r\n\r\nfunction SignUp({ user, idx, setUserData, identity, setUser }) {\r\n  const [email, setEmail] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [modal, setModal] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [signUpToast, setToast] = useToasts(false);\r\n\r\n  useEffect(() => {\r\n    setModal(user === 1);\r\n  }, [user]);\r\n\r\n  const closeHandler = (event) => {\r\n    setModal(false);\r\n  };\r\n  const classes = useStyles();\r\n\r\n  const handleSubmit = async () => {\r\n    //ceramic and threaddb\r\n    const aesKey = await generateCipherKey();\r\n    if (idx) {\r\n      setLoading(true);\r\n\r\n      const client = await loginUserWithChallenge(identity);\r\n      if (client != null) {\r\n        const { status } = await checkEmailExists(email);\r\n        if (status) {\r\n          const enc = await idx.ceramic.did.createDagJWE(aesKey, [idx.id]);\r\n\r\n          const ceramicRes = await idx.set(definitions.profile, {\r\n            name: name,\r\n            email: email,\r\n          });\r\n\r\n          const encCeramic = await idx.set(definitions.encryptionKey, {\r\n            key: enc,\r\n          });\r\n\r\n          const threadRes = await registerNewUser(idx.id, name, email, enc, 0);\r\n\r\n          setUserData(threadRes);\r\n          if (ceramicRes && threadRes) {\r\n            setLoading(false);\r\n            setModal(false);\r\n            setUser(2);\r\n          }\r\n        } else {\r\n          setToast({\r\n            text: 'This Email already Exists, Please try with new Email',\r\n            type: 'warning',\r\n            delay: 5000,\r\n          });\r\n\r\n          setLoading(false);\r\n          setModal(true);\r\n          //setUser(0)\r\n        }\r\n      } else {\r\n        console.log('Not authenticated with server!!!');\r\n        setLoading(false);\r\n        setModal(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal open={modal} onClose={closeHandler}>\r\n        <Modal.Title>Sign up </Modal.Title>\r\n\r\n        <Modal.Content>\r\n          <div className={classes.form}>\r\n            <div className={classes.input}>\r\n              <Input\r\n                placeholder='Enter your Name'\r\n                icon={<Icons.User />}\r\n                className={classes.inputField}\r\n                onChange={(e) => setName(e.target.value)}\r\n              />\r\n            </div>\r\n            <div className={classes.input}>\r\n              <Input\r\n                value={email}\r\n                placeholder='johndoe@domain.com'\r\n                icon={<Icons.Mail />}\r\n                className={classes.inputField}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              />\r\n            </div>\r\n          </div>\r\n        </Modal.Content>\r\n        <Modal.Action passive onClick={() => setModal(false)}>\r\n          Cancel\r\n        </Modal.Action>\r\n        <Modal.Action onClick={handleSubmit} loading={loading}>\r\n          Submit\r\n        </Modal.Action>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SignUp;\r\n"]},"metadata":{},"sourceType":"module"}